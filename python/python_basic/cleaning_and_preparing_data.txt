The few takeaways are:
a. How to work with and prepare text data in Python
b. Basic data cleaning techniques
c. How to correct errors during data cleaning

What is list of list
A single list containing n- number of lists
start[
["Ruby", "17", "blue"],
["Jack", "5", "red"],
["Noah", "12", "purple"],
["Sabine","2", "green"]
]end of list of lists

- To determine how many rows are there in our list of lists, we use Python built-in function len().

# the list of lists is stored

# using the variable name 'children'

num_rows = len(children)
print(num_rows)
//4

`Reading our MoMA(Museum of Modern Art) Dataset`

- We start by importing the reader() function from the csv module:
  from csv import reader
- Next, we use the Python built-in function open() to open the children.csv file:
  opened_file = open('children.csv')
- We then use reader() to parse (or interpret) the opened_file:
  read_file = reader(opened_file)
- Once we have parsed the data, we use the list() function to convert the read_file into a list of lists
 format:
  children = list(read_file)
- Finally, we remove the first row of the data, which contains the column names:
  children = children[1:]

`Replacing Substrings with the Replace Method`
Let's say we have the string "red is my favorite color", but we want to change it to "blue is my favorite 
color". To do that, we want to replace the "red" part of the string with "blue". When we want to refer 
to part of a string, we use the term substring.
The str.replace() method is like a "find and replace" tool for strings. Let's look at the individual 
steps required to change our string:

fav_color = "red is my favorite color"
fav_color = fav_color.replace("red", "blue")
print(fav_color)
// blue is my favorite color

When we decide that we can just replace the substring "r" with "R". Let's look at what happens when we do
 that:
Red is my FavoRite coloR
Because the substring "r" was found in the words favorite and color, we have replaced them giving us 
"favoRite" and "coloR". Be careful where you might have a substring hidden inside other words, and if 
this happens, just use a longer substring:

- We call parts of strings substrings.
- We can use the str.replace() method to find and replace substrings.
  str.replace() requires two arguments:
  a.old: the substring we want to find and replace
  b.new: the substring with which we want to replace old
- When we use str.replace(), we substitute the str for the variable name of the string we want to modify.
- We need to use = to assign the modified string to a variable name.

` Cleaning the Nationality and Gender Columns`
In order to replace characters across the entire moma dataset, we'll need to perform this "replacement" 
many times. For this, we can use a for loop. Let's look at an example using a small sample of our data:

nationalities = ['(American)', '(Spanish)', '(French)']

for n in nationalities:
clean_open = n.replace("(","")
clean_both = clean_open.replace(")","")
print(clean_both)
output:
American
Spanish
French

1.Question:

a.Use a for loop to loop over the moma list of lists. In each iteration of the loop, do the following:
b.Clean the Nationality column of the data set by doing the following:

- Assign the nationality for each row (found at list index 2 of the row) to a variable.
- Use the str.replace() method to remove the open parentheses (() character.
- Use the str.replace() method to remove the close parentheses ()) character.
- Assign the cleaned value back to list index 2 of the row.
  c.Clean the Gender column of the data set (found at index 5 of the row) by repeating the same technique
   you used for the Nationality column.
  Answer:
  for row in moma:
  nationality[2]
  nationality = nationality.replace("(","")
  clean_nationality = nationality.replace(")", "")
  print clean_nationality

  gender = row[5]
  gender = gender.replace("(", "")
  gender = gender.replace(")", "")
  row[5] = gender

`String Capitalization`
The str.title() method returns a copy of the string with the `first letter of each word` transformed to 
uppercase (also known as title case).
my_string = "The cool thing about this string is that it has a CoMbInAtIoN of UPPERCASE and lowercase 
letters!"
my_string_title = my_string.title()
print(my_string_title)

output:
The Cool Thing About This String Is That It Has A Combination Of Uppercase And Lowercase Letters!

2. Question:
   a. Use a loop to iterate over all rows in the moma list of lists. For each row, do the following:
   Clean the Gender column.

- Assign the value from the Gender column, at index 5, to a variable.
- Make the changes to the value of that variable.
- Use the str.title() method to make the capitalization uniform.
- Use an if statement to check if the value is an empty string. If the value is an empty string, give it 
the value "Gender Unknown/Other".
- Assign the modified variable back to list index 5 of the row.
  b.Clean the Nationality column of the dataset (found at index 2) by repeating the same technique you 
  used for the Gender column.
  For missing values in the Nationality column, use the string "Nationality Unknown".

Answer:
for row in moma:
Gender = row[5]
Gender = Gender.title()
if not Gender:
Gender = "Gender Unknown/Other"
row[5] = Gender

    Nationality = row[2]
    Nationality = Nationality.title()
    if not Nationality:
        Nationality = "Nationality Unknown"
        row[2] = Nationality

`Errors During Data Cleaning`
Above we had to repeat code twice â€” first when we cleaned the Gender column, and then when we cleaned 
the Nationality column. Instead of repeating code, we can create a function that performs these 
operations, then use that function to clean each column.

def clean_and_convert(date):
date = date.replace("(", "")
date = date.replace(")", "")
date = int(date)
return date

The function above does the following

- Takes a single argument
- Uses str.replace() to remove the "(" character
- Uses str.replace() to remove the ")" character
- Uses the int() function to convert the string to an integer

birth_date = ''
cleaned_date = clean_and_convert(birth_date)
//output:
ValueError: invalid literal for int() with base 10: ''
This is Python saying "You asked me to convert the string '' to an int type. I tried to do that, but I 
couldn't, because I don't know how to represent an empty string as an integer." This tells us that 
somewhere in one of our date columns, there is a row with a missing date.

- One way to handle these scenarios is to use an if statement to make sure we aren't encountering an 
empty string before we convert our value.

def clean_and_convert(date):
if date != "" :
date = date.replace("(" , "")
date = date.replace(")" , "")
date = int(date)
return date

clean_and_clear("")

output:
''

- Explaination of above code:
  The code defines a function called "clean_and_convert" that takes in a parameter called "date".
  The function checks if the "date" parameter is not an empty string. If it is not empty, the function 
  removes any parentheses from the "date" string and converts it to an integer.
  The function then returns the cleaned and converted "date" value.
  If the "date" parameter is an empty string, the function returns an empty string.

  def clean_and_convet(date):
  if date != "" :
  date= date.replace("()")
  date = int(date)
  return date
  clean_and_convert("")

3. Question:
   We have provided the clean_and_convert() that uses the if statement to bypass missing strings.

Use a for loop to iterate over each row in the moma list of lists. In each iteration, do the following:
Assign the BeginDate and EndDate values (at indices 3 and 4) to variables.
Use the clean_and_convert() function to clean and convert each value.
Assign the converted values back to indices 3 and 4 so the cleaned values are used in the moma list of 
lists.

Ans:
def clean_and_convert(date): # check that we don't have an empty string
if date != "": # move the rest of the function inside # the if statement
date = date.replace("(", "")
date = date.replace(")", "")
date = int(date)
return date

for row in moma:
birth_date = row[3]
death_date = row[4]

    birth_date = clean_and_convert(birth_date)
    death_date = clean_and_convert(death_date)

    row[3] = birth_date
    row[4] = death_date

`Parsing Numbers from Complex Strings`

- Let's create a list of sample strings and a list of bad characters we want to remove from those strings:
  strings = ["good!", "morn?ing", "good?!", "morniZZZZng"]
  bad_chars = ["!", "?", "Z"]

- Next, we'll create a function that uses a for loop to iterate over the bad_chars list and replaces 
each of the bad characters with an empty string:

def strip_characters(string):
for char in bad_chars:
string = string.replace(char,"")
return string

- Finally, we'll use a loop to iterate over each string in strings, and we'll use our strip_characters() 
function to remove the bad characters:

cleaned_strings = []
for s in strings:
s = strip_characters(s)
cleaned_strings.append(s)

print(cleaned_strings)
// ['good', 'morning', 'good', 'morning']

- Let's use this technique to clean the `Date` column

4. Question:
   a. Create a function called strip_characters(), which accepts a string argument and does the following:

- Iterates over the bad_chars list, using str.replace() to remove each character
- Returns the cleaned string
  b. Create an empty list, stripped_test_data.
  c. Iterate over the strings in test_data, and on each iteration, do the following:
- Use the function you created earlier to clean the string.
- Append the cleaned string to the stripped_test_data list.

Answer:
test_data = ["1912", "1929", "1913-1923",
"(1951)", "1994", "1934",
"c. 1915", "1995", "c. 1912",
"(1988)", "2002", "1957-1959",
"c. 1955.", "c. 1970's",
"C. 1990-1999"]

bad_chars = ["(",")","c","C",".","s","'", " "]

def strip_characters(string):
for char in bad_char:
string = string.replace(char, "")
return string

stripped_test_data = []
for data in test_data:
date = strip_characters(data)
stripped_test_data.append(date)

`Parsing Numbers from Complex Strings`
Let's say there are two different scenarios that we need to prepare for when converting these to 
integers:

1. Some are a single year (e.g., 1912).
2. Some are ranges of years (e.g., 1913-1923).

Below are the ways we'll treat the various cases:

- Where there is a single year, we'll keep it.
- Where there is a year range, we'll average the two years.

* We want to write code that does the following for each value:

a. Checks if the dash character (-) is in the string so we know if it's a range or not.
b. If the date is a range:
- Splits the string into two strings, before and after the dash character
- Converts the two numbers to the integer type and then averages them by adding them together and 
dividing by two
- Uses the round() function to round the average, so values like 1964.5 become 1964
  c. If the date isn't a range, we want the code to do the following:
- Convert the value to an integer type
  The first is checking whether a `substring` exists in a `string`, so we can check if the year is a 
  range or not by looking for the dash character. To do this, we use the in operator:
  if "car" in "carpet":
  print("The substring was found.")
  else:
  print("The substring was not found.")

// The substring was found.
if "mike" in "michael":
print("The substring was found.")
else:
print("The substring was not found.")

//The substring was not found.
- We will also need to know how to split a string into two parts. For this, we'll use the str.split() 
method.
  three_peat = "1991-1993"
  print(three_peat.split("-"))

// ["1991", "1993"]

* "Parsing Numbers from Complex Strings, Part Two"

5. Question
Instructions
We have provided the stripped_test_data list, strip_characters() function, and bad_chars list so you 
don't have to toggle between screens.

Create a function called process_date() which accepts a string and follows the logic we outlined above:
Checks if the dash character (-) is in the string so we know if it's a range
If it is a range, it should do the following:
Split the string into two strings, before and after the dash character
Convert the two numbers to the integer type and then average them by adding them together and dividing 
by two
Use the round() function to round the average, so values like 1964.5 become 1964
If it isn't a range, it should do the following:
Converts the value to an integer type
Finally, returns the value
Create an empty list processed_test_data.
Loop over the stripped_test_data list using your process_date() function. Process the dates and append 
each processed date back to the processed_test_data list.
Answer:
test_data = ["1912", "1929", "1913-1923",
             "(1951)", "1994", "1934",
             "c. 1915", "1995", "c. 1912",
             "(1988)", "2002", "1957-1959",
             "c. 1955.", "c. 1970's", 
             "C. 1990-1999"]

bad_chars = ["(",")","c","C",".","s","'", " "]

def strip_characters(string):
    for char in bad_chars:
        string = string.replace(char,"")
    return string

stripped_test_data = ['1912', '1929', '1913-1923',
                      '1951', '1994', '1934',
                      '1915', '1995', '1912',
                      '1988', '2002', '1957-1959',
                      '1955', '1970', '1990-1999']
def process_date(date):
    if "-" in date:
        split_date = date.split("-")
        date_one = split_date[0]
        date_two = split_date[1]       
        date = (int(date_one) + int(date_two)) / 2
        date = round(date)
    else:
        date = int(date)
    return date

processed_test_data = []

for d in stripped_test_data:
    date = process_date(d)
    processed_test_data.append(date)

for row in moma:
    date = row[6]
    date = strip_characters(date)
    date = process_date(date)
    row[6] = date