We stored the data in two ways:
1. Using two separate lists
content_ratings = ['4+', '9+', '12+', '17+']
numbers = [4433, 987, 1155, 622]

2. Using a single list of lists
content_rating_numbers = [['4+', '9+', '12+', '17+'], [4433, 987, 1155, 622]]

'To create the dictionary':
Map each content rating to its corresponding number by following an index:value pattern. 
For instance, to map a rating of '4+' to the number 4,433, we type '4+': 4433 
(notice the colon between '4+' and 4433). To map '9+' to 987, we type '9+': 987, and so on.
Type the entire sequence of index:value pairs, and separated each with a comma: '4+': 4433, '9+': 987, '12+': 1155, '17+': 622.
Surround the sequence with curly braces: {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}

To retrieve the 'individual values' of the content_ratings dictionary, we can use the new indices.
 We retrieve individual dictionary values the same way we retrieve individual list elements 
 â€” we follow a variable_name[index] pattern:
numbers = [4433, 987, 1155, 622]
print(numbers[0])
print(numbers[2])
output:
4433
1155

'and if'
content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}
print(content_ratings['4+'])
print(content_ratings['12+'])
output
4433
1155

'Alternative Method of Creating a Dictionary'
we can create a dictionary and populate it with values by following these steps:

Create an empty dictionary.
Add values one by one to that empty dictionary.
Adding a value to a dictionary follows the pattern dictionary_name[index] = value. 
To add a value 4433 with an index '4+' to a dictionary named content_ratings, we need to use 
the code content_ratings['4+'] = 4433.

content_ratings = {} 
content_ratings['4+'] = 4433

print(content_ratings)
output 
{'4+': 4433}
We can keep adding values using the same approach:
content_ratings = {} 
content_ratings['4+'] = 4433
content_ratings['9+'] = 987
content_ratings['12+'] = 1155
content_ratings['17+'] = 622

print(content_ratings)
output
{'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}

' Key-Value Pairs'
The index of a dictionary value is called a key. In '4+': 4433, the dictionary key is '4+', 
and the dictionary value is 4433. As a whole, '4+': 4433 is a key-value pair.

'Dictionary values' can be of any data type: strings, integers, floats, Booleans, lists, and 
even dictionaries.

d_1 = {'key_1': 'value_1', 
       'key_2': 1,
       'key_3': 1.832,
       'key_4': False,
       'key_5': [1,2,3],
       'key_6': {'inner_key' : 10}}

1.print(d_1)
2.print(d_1['key_1'])
3.print(d_1['key_6'])

output
1. {'key_1': 'value_1', 'key_2': 1, 'key_3': 1.832, 
 'key_4': False, 'key_5': [1, 2, 3], 
 'key_6': {'inner_key': 10}}
2. value_1
3. {'inner_key': 10}

'Dictionary keys' can be almost any data type, except lists and dictionaries.
If we use lists or dictionaries as dictionary keys, we'll get an error :

d_1 = {5: 'int',
       '5': 'string',
       3.5: 'float',
       False: 'Boolean'}

print(d_1)
output
{5: 'int', '5': 'string', 3.5: 'float', False: 'Boolean'}

and if list & dictionaries then it will give an error :
d_2 = {[1,2,3]: 'list'}

print(d_2)
output
TypeError: unhashable type: 'list'

d_3 = {{'key': 'value'}: 'dictionary'}

print(d_3)
output
TypeError: unhashable type: 'dict'

Python tries to convert each dictionary key to an integer (even if the key is a data type other 
than an integer). Python does the conversion using the hash() command:
print(hash(4))
print(hash('four'))
print(hash(3.32))
print(hash(True))

output
4
-161051316448665671
737869762948381699
1

The hash() command doesn't transform lists and dictionaries to integers. It returns an error 
instead. 
print(hash([1,2,3]))
Output
TypeError: unhashable type: 'list'

print(hash({'key': 'value'}))
Output
TypeError: unhashable type: 'dict'

Each 'key' in dictionary should be unique. If we use an identical key for two or more 
different values, 'Python keeps only the the first key and the last value and removes the other'.

d_1 = {'a_key': 1,
       'another_key': 2,
       'a_key': 3,
       'yet_another_key': 4,
       'a_key': 5}

print(d_1)

output
{'a_key': 5, 'another_key': 2, 'yet_another_key': 4}

The hash() command converts the Boolean True to 1, and the Boolean False to 0. 
This means the Booleans True and False will conflict with the integers 0 and 1. 
The dictionary keys won't be unique anymore, and Python will only keep the first key 
and the last value in cases like that.

d_1 = {1: 'one', True: 'Boolean'}
d_2 = {False: 'Bool', 0: 'zero'}
d_3 = {0: 'zero', 1: 'one',  2: 'two', True: 'true',
       False: 'false'}

print(d_1)
print(d_2)
print(d_3)

Output
{1: 'Boolean'}
{False: 'zero'}
{0: 'false', 1: 'true', 2: 'two'

'To learn how to count the number of apps for each unique content rating'
we can check if a certain value exists in the dictionary as a key.
eg:if the value '12+' exists as a key in the dictionary 
{'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}. 
 we use the 'in' operator.

 content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}
print('12+' in content_ratings)
output
True
The '12+' in content_ratings expression returned the Boolean True. This is because the 
string '12+' exists in the dictionary content_ratings as a key.
If we use in with a certain value that doesn't exist among a dictionary's keys, we'll get False.
Checking if 4433 or 987 exists in content_ratings also returns False because the search is only
 for the dictionary's keys (4433 and 987 exist as dictionary values in content_ratings).

content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}

print(4433 in content_ratings)
print(987 in content_ratings)
output
False
False

1. Question
a. Using the in operator, check whether the following values exist as dictionary 'keys' in the 
content_ratings dictionary:
The string '9+'. Assign the output of the expression to a variable named is_in_dictionary_1.
The integer 987. Assign the output of the expression to a variable named is_in_dictionary_2.
b. Combine the output of an expression containing in with an if statement. 
If the string '17+' exists as dictionary key in content_ratings, then do the following:
Assign the string "It exists" to a variable named result.
Print the result variable.

Answer:
content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}
is_in_dictionary_1 = '9'in content_ratings
is_in_dictionary_2 = 987 in content_ratings

if '17+' in content_ratings:
    result ="It exists"
    
    print(result)

'Counting with Dictionaries'
To update a dictionary value, we need to reference it by its corresponding dictionary key 
and then perform the updating operation we want.

2. Question
a. Change the value corresponding to the dictionary key '4+' from 4433 to 0.
b. Add 13 to the value corresponding to the dictionary key '9+'.
c. Subtract 1155 from the value corresponding to the dictionary key '12+'.
d. Change the value corresponding to the dictionary key '17+' from 622 (integer) to '622' (string).

content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}
Answer:
content_ratings ['4+'] = 0
content_ratings ['9+'] +=13 // or content_ratings ['9+'] + 13
content_ratings ['12+'] -=115
content_ratings ['17+'] = '622'
print(content_ratings)

'To count how many times each unique content rating occurs in our data set.' 
3. Question
a. Create a dictionary where the keys are the unique content ratings and the values are all 0:
 {'4+': 0, '9+': 0, '12+': 0, '17+': 0}.
b. Loop through the list ['4+', '4+', '4+', '9+', '9+', '12+', '17+'], and for each iteration, 
do the following:
* Check if the iteration variable exists as a key in the previously created dictionary.
* If it exists, then increment the dictionary value at that key by 1.

Answer:
opened_file = open('AppleStore.csv')
from csv import reader
read_file = reader(opened_file)
apps_data = list(read_file)
opened_file.close()

content_ratings = {'4+': 0, '9+': 0, '12+': 0, '17+': 0}
rating = ['4+', '4+', '4+', '9+', '9+', '12+', '17+']

for c_rating in rating:
if c_rating in content_ratings:
content_ratings[c_rating] +=1
print(content_ratings)

output
{'4+': 3, '9+': 2, '12+': 1, '17+': 1}

4.Question:
Count the number of times each unique content rating occurs in the data set.
a. Create a dictionary named content_ratings where the keys are the unique content ratings 
and the values are all 0 (the values of 0 are temporary at this point, and they'll be updated).
b. Loop through the apps_data list of lists. Make sure you don't include the header row. 
For each iteration of the loop, do the following:
* Assign the content rating value to a variable named c_rating. The content rating is at
index number 10 in each row.
* Check if c_rating exists as a key in content_ratings. If it exists, then increment the dictionary
value at that key by 1 (the key is equivalent to the value stored in c_rating).
Outside the loop, print content_ratings to check if the counting worked as expected.

Answer:
opened_file = open('AppleStore.csv')
from csv import reader
read_file = reader(opened_file)
apps_data = list(read_file)
opened_file.close()

content_ratings = {'4+': 0, '9+': 0, '12+': 0, '17+': 0}
for row in apps_data[1:]:
content_ratings = row[10]
if c_rating in content_ratings:
content_ratings[c_rating] +=1
print(content_ratings)

'Finding the Unique Values'
5.Question:
a. Create an empty dictionary named content_ratings.
b. Loop through the list ['4+', '4+', '4+', '9+', '9+', '12+', '17+'], and check for every
iteration where the iteration variable (c_rating) exists as a key in content_ratings.
* If it exists, then increment the dictionary value at that key by 1.
* Else (if it doesn't exist), create a new key-value pair in the content_ratings dictionary, 
where the dictionary key is the iteration variable (c_rating) and the dictionary value is 1.


Answer:
opened_file = open('AppleStore.csv')
from csv import reader
read_file = reader(opened_file)
apps_data = list(read_file)
opened_file.close()

content_ratings = {}
ratings = ['4+', '4+', '4+', '9+', '9+', '12+', '17+']
for c_ratings in content_ratings:
if c_rating in content_ratings:
content_ratings[c-rating]+=1:
else:
content_rating[c_rating] = 1

output
{'4+': 3, '9+': 2, '12+': 1, '17+': 1}


6. Question
a. Create an empty dictionary named content_ratings.
b. Loop through the 'apps_data' list of lists (don't include the header row). For each iteration 
of the loop, do the following:
* Assign the content rating value to a variable named c_rating. The content rating is at index 
number 10.
* Check if c_rating exists as a key in content_ratings.
* If it exists, then increment the dictionary value at that key by 1 (the key is equivalent to the 
value stored in c_rating).
* Else, create a new key-value pair in the dictionary, where the dictionary key is c_rating and 
the dictionary value is 1.
Outside the loop, print content_ratings to check if the counting worked as expected.

Answer:
opened_file = open('AppleStore.csv')
from csv import reader
read_file = reader(opened_file)
apps_data = list(read_file)
opened_file.close()

content_ratings = {}

for row in apps_data[1:]:
    c_rating = row[10]
    if c_rating in content_ratings:
        content_ratings[c_rating] += 1
    else:
        content_ratings[c_rating] = 1
        
print(content_ratings)


'Proportions and Percentages'
4+ occurs 4,433 times, so it has a frequency of 4,433. 12+ has a frequency of 1,155. 
9+ has a frequency of 987. 17+ has the lowest frequency: 622.

There are 4,433 apps with a content rating of 4+ and 7,197 apps in total, so the proportion of 
4+ apps in our data set is 
4433/7197. 
Rather than using a fraction, it's more common to express the proportion as a decimal between 0 and 1.
So we'd say that 
0.62
 (the result of 4433/7197 rounded to two decimal places) of the apps have a content rating of 4+.
To get percentages, we only need to multiply the proportions by 100. Since the proportion of 4+ is 
0.62, the percentage is 62%(the result of 0.62Ã—100).

7. Question:
Count the number of times each unique genre occurs.
a. Create an empty dictionary named genre_counting.
b. Loop through the apps_data list of lists (don't include the header row). For each iteration
 of the loop, do the following:
* Assign the genre to a variable named genre. The genre comes as a string and has the index number 11.
* Check if genre exists as a key in genre_counting.
* If it exists, then increment the dictionary value at that key by 1 (the key is equivalent to 
the value stored in genre).
* Else, create a new key-value pair in the dictionary, where the dictionary key is genre and
 the dictionary value is 1.
Outside the loop, print genre_counting and try to determine the most common app genre in our data set.

Answer:
opened_file = open('AppleStore.csv')
from csv import reader
read_file = reader(opened_file)
apps_data = list(read_file)
opened_file.close()

genre_counting = {}

for row in apps_data[1:]:
    genre = row[11]
    if genre in genre_counting:
        genre_counting[genre] +=1
    else:
        genre_counting[genre] = 1

print(genre_counting)

'Looping over Dictionaries'
To transform frequencies to proportions or percentages, we can update the dictionary values 
individually by performing the required arithmetical operations. Below, we divide each dictionary 
value by the total number of apps to go from frequencies to proportions.

content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}
total_number_of_apps = 7197

content_ratings['4+'] /= total_number_of_apps
content_ratings['9+'] /= total_number_of_apps
content_ratings['12+'] /= total_number_of_apps
content_ratings['17+'] /= total_number_of_apps

print(content_ratings)
output{'4+': 0.6159510907322495, '9+': 0.13714047519799916, 
 '12+': 0.16048353480616923, '17+': 0.08642489926358204}
Updating each individual dictionary value can become tedious as the dictionary length increases.
we can speed up the process using a for loop.
When we iterate over a dictionary with a for loop, we loop over the dictionary 'keys' by default:
content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}

for iteration_variable in content_ratings:
    print(iteration_variable)
output
4+
9+
12+
17+

'We can use the dictionary keys to access the dictionary values within the loop' :
content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}

for iteration_variable in content_ratings:
    print(iteration_variable)
    print(content_ratings[iteration_variable])
output
4+
4433
9+
987
12+
1155
17+
622
'To ransform frequencies to proportions from within the loop' :
content_ratings = {'4+': 4433, '9+': 987, '12+': 1155, '17+': 622}
total_number_of_apps = 7197

for iteration_variable in content_ratings:
 content_ratings[iteration_variable] /= total_number_of_apps

 print(content_rating)
output
 {'4+': 0.6159510907322495, '9+': 0.13714047519799916, 
 '12+': 0.16048353480616923, '17+': 0.08642489926358204}

8. Question:
a. Loop over the content_ratings dictionary, and transform the frequencies to percentages.
 For every iteration of the loop, do the following:
b. Transform the dictionary value (the frequency) to a proportion by dividing it by the 
total number of apps.
c. Transform the updated dictionary value (the proportion) to a percentage by multiplying it by 100.
d. Determine the percentage of apps that have a content rating of '17+'. Assign your answer to a
 variable named percentage_17_plus.
e. Determine the percentage of apps that a 15-year-old can download. Assign your answer to a 
variable named percentage_15_allowed.

Answer:

content_ratings = {'4+': 4433, '12+': 1155, '9+': 987, '17+': 622}
total_number_of_apps = 7197
for rating in content_ratings:
content_ratings[rating] /= total_number_of_apps
content_rating[rating] *= 100
// all content_rating values are converted in % now just check the values for 17+ and 15+

percentage_17_plus = content_rating['17+']
percentage_15_allowed = content_rating['4+'] + content_rating['9+'] + content_rating['12+']

'Keeping the Dictionaries Separate'
We transformed frequencies to proportions or percentages by overwriting the initial dictionary values.
However, we'll often need to keep the dictionaries separate for later analysis. 
We might want to have three separate dictionaries: one storing frequencies, another storing 
proportions, and another storing percentages.
When we transform frequencies to proportions, we can create a new dictionary instead of overwriting 
the values in the initial dictionary.

content_ratings = {'4+': 4433, '12+': 1155, '9+': 987, '17+': 622}
total_number_of_apps = 7197
c_ratings_proportions = {}

for key in content_ratings:
    proportion = (content_ratings[key] / total_number_of_apps)     
    c_ratings_proportions[key] = proportion

print(c_ratings_proportions)
print(content_ratings)
output:
{'4+': 0.6159510907322495, '12+': 0.16048353480616923, 
 '9+': 0.13714047519799916, '17+': 0.08642489926358204}
{'4+': 4433, '12+': 1155, '9+': 987, '17+': 622}

To see how this works, we'll print the iteration variable, the proportion, and the new dictionary 
for every iteration:

content_ratings = {'4+': 4433, '12+': 1155, '9+': 987, '17+': 622}
total_number_of_apps = 7197
c_ratings_proportions = {}

for key in content_ratings:
    proportion = (content_ratings[key] / total_number_of_apps)     
    print('Key:', key)
    print('Proportion value:', proportion)

    c_ratings_proportions[key] = proportion
    print(c_ratings_proportions)
output
Key: 4+
Proportion value: 0.6159510907322495
{'4+': 0.6159510907322495}
Key: 12+
Proportion value: 0.16048353480616923
{'4+': 0.6159510907322495, '12+': 0.16048353480616923}
Key: 9+
Proportion value: 0.13714047519799916
{'4+': 0.6159510907322495, '12+': 0.16048353480616923, '9+': 0.13714047519799916}
Key: 17+
Proportion value: 0.08642489926358204
{'4+': 0.6159510907322495, '12+': 0.16048353480616923, '9+': 0.13714047519799916, '17+': 0.08642489926358204}


9. Question:
a. Transform the frequencies inside content_ratings to proportions and percentages while 
creating separate dictionaries for each.
* Assign the dictionary storing proportions to a variable named c_ratings_proportions.
* Assign the dictionary storing percentages to a variable named c_ratings_percentages.
b. Optional challenge: try to solve this exercise using a single for loop.

Answer:
content_ratings = {'4+': 4433, '12+': 1155, '9+': 987, '17+': 622}
total_number_of_apps = 7197

c_ratings_proportions = {}
c_ratings_percentages = {}
for key in content_ratings:
    proportion = (content_ratings[key]/ total_number_of_apps)
    c_ratings_proportions[key] = proportion
    print(c_ratings_proportions)
    percentage = proportion * 100
    c_ratings_percentages[key] = percentage
    print(c_ratings_percentages)


'Frequency Tables for Numerical Columns'  
A long frequency table is difficult to analyze. The longer the table, the more difficult it becomes
to identify patterns. we can create 'well-defined intervals' and count the 'frequency' for those 
intervals instead.
Some reasonable intervals, it often helps to know the minimum and the maximum values of a column. 
This will help us determine where the intervals should start and where they should end.
We can use the min() and the max() commands. These two commands will find out the minimum and the 
maximum values for any list of integers or floats. But min() and max() do not work properly for 
strings
a_list = [1, 20, 10.5, 4, 0] //works
print(max(a_list))
print(min(a_list))

a_list = ['1', '20', '10.5', '4', '0'] // doesnt work

10.Question
a. Extract the values in the size_bytes column in a separate list.
* Create an empty list named data_sizes.
* Loop through apps_data (don't include the header row) and for every iteration, do the following:
* Store the data size as a float in a variable named size (the index number for the data size is 2).
* Append size to the data_sizes list.

b. Determine the minimum and the maximum app data size.
* Assign the minimum value to a variable named min_size.
* Assign the maximum value to a variable named max_size.

Answer:
from csv import reader
opened_file = open('AppleStore.csv')
read_file = reader(opened_file)
apps_data = list(read_file)
opened_file.close()

data_sizes = []

for row in apps_data[1:]:
size = float(row[2])
data_sizes.append(size)

max_size = max(data_sizes)
min_size = min(data_sizes)


'Filtering for the Intervals'
11.Question
a. We want to store the frequency table as a dictionary. We begin by creating a dictionary with
 the intervals as dictionary keys and frequencies as dictionary values (we initialize all frequencies
  with zero):
data_sizes = {'0 - 10 MB': 0, '10 - 50 MB': 0, '50 - 100 MB': 0,
                    '100 - 500 MB': 0, '500 MB +': 0}
b. Next, we loop through our data set. For each iteration, do the following:
* Store the data size as a float in a variable named data_size.
* Determine which interval the data size belongs to by using an if statement followed by a series
 of elif clauses (we use elif to avoid redundant computations).
* Increment the frequency in our dictionary by 1 depending on the interval to which the data size 
belongs.
* Note that we use code like 10000000 < data_size <= 50000000 â€” this is equivalent to 
10000000 < data_size and data_size <= 50000000.

Answer:
data_sizes = {'0 - 10 MB': 0, '10 - 50 MB': 0, '50 - 100 MB': 0,
                    '100 - 500 MB': 0, '500 MB +': 0}

for row in apps_data[1:]:
    data_size = float(row[2])

    if data_size <= 10000000:
        data_sizes['0 - 10 MB'] += 1

    elif 10000000 < data_size <= 50000000:
        data_sizes['10 - 50 MB'] += 1

    elif 50000000 < data_size <= 100000000:
        data_sizes['50 - 100 MB'] += 1

    elif 100000000 < data_size <= 500000000:
        data_sizes['100 - 500 MB'] += 1

    elif data_size > 500000000:
        data_sizes['500 MB +'] += 1


print(data_sizes)






