This is again 'exploratory data visualization'. This will help:
- How to speed up our exploratory data visualization workflow using Pandas.
- How to better compare graphs using grid charts.


************************************
Topic: 'Traffic Behaviour Dataset':
************************************

Our dataset describes the urban traffic in the city São Paulo from December 14, 2009 to 
December 18, 2009 — from Monday to Friday. 

Task:

a. Import the pandas module as pd.
b. Read in the traffic_sao_paulo.csv file using pd.read_csv().
- The data points are separated by ;, so you will need to use sep=';' to read in the file properly.
- Assign the result to a variable named traffic.
c. Perform a quick examination of the dataset.
- Inspect the first and the last five rows.
-Use DataFrame.info() to print summary information about the dataset. Do you see any missing values? 
Are all data types numerical?


Action: 

import pandas as pd
traffic = pd.read_csv('traffic_sao_paulo.csv', sep';')
traffic.head(5)
traffic.tail(5)
traffic.info()

******************************
Topic : 'Slowness in Traffic'
*******************************


To determine the factors that cause the traffic slowness in São Paulo to worsen.
Let's begin by exploring the Slowness in traffic (%) column. The data type of this column is object, 
so we converted it to a float

Tasks:

a. Import matplotlib.pyplot, and plot a histogram for the Slowness in traffic (%) column — run your code without submitting the answer.
- Display the plot using plt.show().
b. Based on the histogram, evaluate the truth value of the sentences below.
- The distribution of Slowness in traffic (%) is right skewed. Assign the Boolean True or False to sentence_1.
- Most of the values pile up on the left side of the histogram. Assign True or False to sentence_2.
- Most of the values are over 15.0%. Assign True or False to sentence_3.

Action:

import pandas as pd
import matplotlib.pyplot as plt
traffic = pd.read_csv('traffic_sao_paulo.csv', sep=';')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].str.replace(',', '.')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].astype(float)
plt.hist(traffic['Slowness in traffic (%)'])
plt.show()
sentence_1 = True
sentence_2 = True
sentence_3 = False


****************************************
 Topic: 'Pandas Visualization Methods'
******************************************
A quicker way to generate the same above histogram is to use the Series.plot.hist() method:
traffic['slowness in traffic'].plot.hist()
plt.show()

The Pandas library has other useful visualization methods as well:

- Series.plot.bar(): generates a vertical bar plot.
- Series.plot.barh(): generates a horizontal bar plot.
- Series.plot.line(): generates a line plot.


Tasks:

a. Use the Series.plot.hist() method to generate a histogram for the Slowness in traffic (%) column.
b. Add the title Distribution of Slowness in traffic (%) (the answer checking is case-sensitive).
c. Add the x-label Slowness in traffic (%).
d. Display the plot using plt.show().


Action:

import matplotlib.pyplot as plt
import pandas as pd
traffic = pd.read_csv('traffic_sao_paulo.csv', sep=';')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].str.replace(',', '.')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].astype(float)
traffic['Slowness in traffic (%)'].plot.hist()
plt.title('Distribution of Slowness in traffic (%)')
plt.xlabel('Slowness in traffic (%)')
plt.show()

********************************
Topic : 'Frequency of Incidents'
*********************************


Question: What does (pandas.core.series.Series) mean in Python?
Answer : pandas is a module (library) that you can use in python. core.series.Series are "sub-module" 
object or function from your pandas library
Series is a "sub-module" of series. "pandas" contain "core" that contain "series" that contain "Series"
- you will find information about pandas here :
http://pandas.pydata.org/pandas-docs/stable/dsintro.html

tasks:


a. Generate a horizontal bar plot for the incidents.sum() table. Run your code without submitting the answer.
b. Based on the resulting bar plot, evaluate the truth value of the following sentences:
- Broken trucks are the most frequent cause of slow traffic. Assign the Boolean True or False to sentence_1.
- Lack of electricity and flooding are less frequent than broken trucks. Assign True or False to sentence_2.
- The most frequent incident type is broken trucks. Assign True or False to sentence_3.

Actions:

import pandas as pd
import matplotlib.pyplot as plt

traffic = pd.read_csv('traffic_sao_paulo.csv', sep=';')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].str.replace(',', '.')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].astype(float)
incidents = traffic.drop(['Hour (Coded)', 'Slowness in traffic (%)'],
                        axis=1)

incidents.sum().plot.barh()
plt.show()

sentence_1 = False
sentence_2 = True
sentence_3 = True
___________________________________________________________________________
incidents = traffic.drop(['Hour (Coded)', 'Slowness in traffic (%)'], axis=1)

'Explaination' : The code above drops two columns ('Hour (Coded)' and 'Slowness in traffic (%)') from a
DataFrame called 'traffic' using the drop() method. The axis parameter is set to 1 to indicate that the
columns should be dropped. The resulting DataFrame is assigned to a new variable called 'incidents'.
The sum() method is then applied to the 'incidents' DataFrame to calculate the total number of 
incidents for each column. The resulting output is printed to the console. 


**********************************************
Topic: 'Correlations with Traffic Slowness'
*************************************************


print(traffic.corr()['Slowness in traffic (%)'])
Explaination: The code above calculates the correlation between the 'Slowness in traffic (%)' column and all other 
columns in the 'traffic' dataset. It then prints the resulting correlation values. The correlation 
coefficient ranges from -1 to 1, where -1 indicates a perfect negative correlation, 0 indicates 
no correlation, and 1 indicates a perfect positive correlation.

* Instead of writting 
plt.scatter(traffic['Slowness in traffic (%)'],
            traffic['Lack of electricity'])
plt.show()

* We can use Pandas to generate the scatter plot above. Specifically, we can use the 
DataFrame.plot.scatter() method:
traffic.plot.scatter(x='Slowness in traffic (%)',
                     y='Lack of electricity')
plt.show()

**************************************
 Topic : 'Traffic Slowness Over 20%'
**************************************


Here we're going to isolate all the rows where traffic slowness is 20% or more. Then calculate and 
visualize the incident frequency.

Tasks:

a. Isolate all the rows where traffic slowness is 20% or more. Assign the new DataFrame to a variable 
named slowness_20_or_more.
b. Drop the Slowness in traffic (%) and Hour (Coded) columns from slowness_20_or_more.
c. Calculate the event frequencies using the DataFrame.sum() method on slowness_20_or_more. 
Assign the resulting Series to incident_frequencies.
d. Use incident_frequencies to plot a horizontal bar plot — use a Pandas method.
e. Examine the plot — what are some high-frequency incidents when traffic slowness is 20% or more?

Action:

import pandas as pd 
import matplotlib pyplot as plt

traffic = pd.read_csv('traffic_sao_paulo.csv', sep';')
traffic['slowness in traffic (%)'] = traffic['slowness in traffic (%)'].str.replace(',' , '.')
traffic['slowness in traffic (%)'] = traffic['slowness in traffic (%)'].astype(float)

slowness_20_or_more = traffic[traffic['slowness in traffic (%)'] >= 20] 
slowness_20_or_more = slowness_20_or_more.drop(['slowness in traffic (%)' , ['Hour(Coded)'], axis=1)
incident_frequencies = slowness_20_or_more.sum()
incident_frequencies = slowness_20_or_more.plot.barh()
plt.show()

******************************************
Topic : 'How Traffic Slowness Change'
******************************************
 We're going to isolate the data for each day — from Monday to Friday.

days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
traffic_per_day = {}
for i, day in zip(range(0, 135, 27), days):
    each_day_traffic = traffic[i:i+27]
    traffic_per_day[day] = each_day_traffic

Explaination of above code:
- days is a list containing five strings representing days of the week:
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].
- The traffic_per_day variable is a Python dictionary. It contains five keys: 
'Monday', 'Tuesday', 'Wednesday', 'Thursday', and 'Friday'. For each key, we have a DataFrame containing
only the data for that specific day. For instance, traffic_per_day['Monday'] has only the data for Monday:
- We use the zip() function above to iterate over range() and days at the same time.
- The zip() function is used to combine two or more iterables element-wise, 
creating a new iterable with pairs of corresponding elements from the input iterables.
-In this code, there are two lists being zipped together:
1. range(0, 135, 27) creates a list-like object containing numbers from 0 to 135 (exclusive) in increments 
of 27. So it produces the sequence [0, 27, 54, 81, 108].
2. days is a list containing five strings representing days of the week:
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].

- zip(range(0, 135, 27), days) combines these two iterables into a new iterable, which looks like below:
[(0, 'Monday'), (27, 'Tuesday'), (54, 'Wednesday'), (81, 'Thursday'), (108, 'Friday')

- The code inside the loop calculates a slice of the traffic list for each day, starting at index i and 
ending at index i + 27. This each_day_traffic slice is then added to the traffic_per_day dictionary
with the day of the week as the key.

- When the loop finishes executing, traffic_per_day will contain the traffic data for each day of the 
week in separate entries.

* To visualize how the values of a column change over time, we can use a line plot. To generate a line 
plot out of a DataFrame, we can use the DataFrame.plot.line() method.

'plt.ylim([0, 25])' to make the range of the y-axis the same for all plots — this helps with comparison.
traffic_per_day['Monday'].plot.line(x='Hour (Coded)',
                                    y='Slowness in traffic (%)')
plt.show()


Tasks:

a. Create a separate line plot for each day by using a for loop. Iterate over the days list, and for 
each day, do the following:
- Plot a line plot using the DataFrame.plot.line() method — Hour (Coded) must be on the x-axis and 
Slowness in traffic (%) on the y-axis.
- Add a title to the plot using the name of the day.
- Use plt.ylim([0, 25]) to make the range of the y-axis the same for all plots — this helps with 
comparison.
- Close and display each plot with plt.show().


Action:


import pandas as pd
import matplotlib.pyplot as plt

traffic = pd.read_csv('traffic_sao_paulo.csv', sep=';')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].str.replace(',', '.')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].astype(float)

days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
traffic_per_day = {}
for i, day in zip(range(0, 135, 27), days):
    each_day_traffic = traffic[i:i+27]
    traffic_per_day[day] = each_day_traffic


for day in days:
    traffic_per_day[day].plot.line(x='Hour (Coded)',
                                   y='Slowness in traffic (%)')
    plt.title(day)
    plt.ylim([0, 25])
    plt.show()


*******************************
Situation : Comparing Graphs
*******************************
DataFrame.plot.line()-  It plots separate graphs by default, which means we won't be able to put all 
the lines on the same graph.
 Instead of the DataFrame.plot.line() method, we use plt.plot().


Tasks:

a. Generate all the five line plots on a single graph. Use a for loop over the days list, and for each 
day, do the following
-Plot a line plot using plt.plot(): Hour (Coded) must be on the x-axis and Slowness in traffic (%) on 
the y-axis.
b. Add a legenbd to the graph.
- Outside the for loop, use plt.legend().
- Inside the for loop, use the label parameter inside plt.plot() — the label should be the day name.


Action: 


import pandas as pd
import matplotlib.pyplot as plt

traffic = pd.read_csv('traffic_sao_paulo.csv', sep=';')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].str.replace(',', '.')
traffic['Slowness in traffic (%)'] = traffic['Slowness in traffic (%)'].astype(float)

days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
traffic_per_day = {}
for i, day in zip(range(0, 135, 27), days):
    each_day_traffic = traffic[i:i+27]
    traffic_per_day[day] = each_day_traffic


for day in days:
    plt.plot(traffic_per_day[day]['Hour (Coded)'],
             traffic_per_day[day]['Slowness in traffic (%)'],
             label=day)

plt.legend()
plt.show()


In a  line graph there are lines which are closer to one another, which makes graph harder to read
Some of them even intersects with other lines, a solution to this is to use a 'grid chart' also called
a small multiple. The main purpose of a grid chart is to ease comparison.
- To create a grid chart we use the plt.figure() function.
- The second step is to create the first plot. You can also call the plots on a grid chart subplots.
use the plt.subplot() function to create our first plot
- We can specify the number of rows and columns for our grid chart by using the 
plt.subplot(nrows, ncols, index) function.
 For instance, plt.subplot(3, 2, 1) means that we want to build the plot with index 1 on a grid chart 
 that has 3 rows and 2 columns.

 eg:
plt.figure()
plt.subplot(3, 2, 1) // 1 is the index
plt.subplot(3, 2, 2)
plt.subplot(3, 2, 6) // 6 is the index
plt.subplot(3, 2, 3)
plt.subplot(3, 2, 4)
plt.subplot(3, 2, 5)
plt.show()
plt.show()

